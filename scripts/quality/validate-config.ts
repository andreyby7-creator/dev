#!/usr/bin/env node

/**
 * –°—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ CI –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * - –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω—ã –≤ env.config.ts
 * - –ù–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 * - –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞
 */

import { existsSync, readFileSync } from 'fs';
import { join } from 'path';

interface ValidationResult {
  success: boolean;
  errors: string[];
  warnings: string[];
}

class ConfigValidator {
  private envConfigPath = join(
    process.cwd(),
    'apps/api/src/config/env.config.ts'
  );
  private envExamplePath = join(process.cwd(), '.env.example');
  private envPath = join(process.cwd(), '.env');

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Zod —Å—Ö–µ–º—ã
   */
  private extractSchemaVariables(): string[] {
    if (!existsSync(this.envConfigPath)) {
      throw new Error(`–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.envConfigPath}`);
    }

    const content = readFileSync(this.envConfigPath, 'utf-8');
    const lines = content.split('\n');
    const variables: string[] = [];

    for (const line of lines) {
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: VARIABLE_NAME: z.string()
      const match = line.match(/^\s*([A-Z_][A-Z0-9_]*)\s*:/);
      if (match) {
        variables.push(match[1]);
      }
    }

    return variables;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.example
   */
  private extractEnvExampleVariables(): string[] {
    if (!existsSync(this.envExamplePath)) {
      return [];
    }

    const content = readFileSync(this.envExamplePath, 'utf-8');
    const lines = content.split('\n');
    const variables: string[] = [];

    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const match = trimmed.match(/^([A-Z_][A-Z0-9_]*)/);
        if (match) {
          variables.push(match[1]);
        }
      }
    }

    return variables;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
   */
  private extractEnvVariables(): string[] {
    if (!existsSync(this.envPath)) {
      return [];
    }

    const content = readFileSync(this.envPath, 'utf-8');
    const lines = content.split('\n');
    const variables: string[] = [];

    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const match = trimmed.match(/^([A-Z_][A-Z0-9_]*)/);
        if (match) {
          variables.push(match[1]);
        }
      }
    }

    return variables;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –æ–ø–∏—Å–∞–Ω—ã –≤ —Å—Ö–µ–º–µ
   */
  private checkAllEnvVariablesInSchema(): string[] {
    const schemaVars = this.extractSchemaVariables();
    const envVars = this.extractEnvVariables();
    const errors: string[] = [];

    for (const envVar of envVars) {
      if (!schemaVars.includes(envVar)) {
        errors.push(
          `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${envVar} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ .env, –Ω–æ –Ω–µ –æ–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ö–µ–º–µ`
        );
      }
    }

    return errors;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.example –æ–ø–∏—Å–∞–Ω—ã –≤ —Å—Ö–µ–º–µ
   */
  private checkAllExampleVariablesInSchema(): string[] {
    const schemaVars = this.extractSchemaVariables();
    const exampleVars = this.extractEnvExampleVariables();
    const errors: string[] = [];

    for (const exampleVar of exampleVars) {
      if (!schemaVars.includes(exampleVar)) {
        errors.push(
          `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${exampleVar} —É–∫–∞–∑–∞–Ω–∞ –≤ .env.example, –Ω–æ –Ω–µ –æ–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ö–µ–º–µ`
        );
      }
    }

    return errors;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å—Ö–µ–º–µ
   */
  private checkUnusedSchemaVariables(): string[] {
    const schemaVars = this.extractSchemaVariables();
    const envVars = this.extractEnvVariables();
    const exampleVars = this.extractEnvExampleVariables();
    const allUsedVars = [...new Set([...envVars, ...exampleVars])];
    const warnings: string[] = [];

    for (const schemaVar of schemaVars) {
      if (!allUsedVars.includes(schemaVar)) {
        warnings.push(
          `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${schemaVar} –æ–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ö–µ–º–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ .env –∏–ª–∏ .env.example`
        );
      }
    }

    return warnings;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å TypeScript —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private checkTypeScriptSyntax(): string[] {
    const errors: string[] = [];

    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —á–µ—Ä–µ–∑ require
      require(this.envConfigPath);
    } catch (error) {
      errors.push(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ ${this.envConfigPath}: ${error}`);
    }

    return errors;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  validate(): ValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
      errors.push(...this.checkTypeScriptSyntax());

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      errors.push(...this.checkAllEnvVariablesInSchema());
      errors.push(...this.checkAllExampleVariablesInSchema());

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      warnings.push(...this.checkUnusedSchemaVariables());
    } catch (error) {
      errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error}`);
    }

    return {
      success: errors.length === 0,
      errors,
      warnings,
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');

  const validator = new ConfigValidator();
  const result = validator.validate();

  if (result.errors.length > 0) {
    console.log('‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
    result.errors.forEach(error => {
      console.log(`  - ${error}`);
    });
    console.log();
  }

  if (result.warnings.length > 0) {
    console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
    result.warnings.forEach(warning => {
      console.log(`  - ${warning}`);
    });
    console.log();
  }

  if (result.success) {
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞!');
    process.exit(0);
  } else {
    console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏!');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

export { ConfigValidator };
