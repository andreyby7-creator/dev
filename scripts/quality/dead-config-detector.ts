#!/usr/bin/env node

/**
 * –î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Å—Ö–µ–º–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
 */

import { readFileSync, existsSync, readdirSync } from 'fs';
import { join } from 'path';

interface DeadConfigResult {
  unusedVariables: string[];
  usedVariables: string[];
  totalVariables: number;
}

class DeadConfigDetector {
  private envConfigPath = join(
    process.cwd(),
    'apps/api/src/config/env.config.ts'
  );
  private sourceDir = join(process.cwd(), 'apps/api/src');
  private excludedDirs = ['node_modules', '.git', 'dist', 'build', 'coverage'];

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Zod —Å—Ö–µ–º—ã
   */
  private extractSchemaVariables(): string[] {
    if (!existsSync(this.envConfigPath)) {
      throw new Error(`–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.envConfigPath}`);
    }

    const content = readFileSync(this.envConfigPath, 'utf-8');
    const lines = content.split('\n');
    const variables: string[] = [];

    for (const line of lines) {
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: VARIABLE_NAME: z.string()
      const match = line.match(/^\s*([A-Z_][A-Z0-9_]*)\s*:/);
      if (match) {
        variables.push(match[1]);
      }
    }

    return variables;
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
   */
  private findTypeScriptFiles(dir: string): string[] {
    const files: string[] = [];

    if (!existsSync(dir)) return files;

    const items = readdirSync(dir, { withFileTypes: true });

    for (const item of items) {
      const fullPath = join(dir, item.name);

      if (item.isDirectory()) {
        if (!this.excludedDirs.includes(item.name)) {
          files.push(...this.findTypeScriptFiles(fullPath));
        }
      } else if (item.isFile() && item.name.endsWith('.ts')) {
        files.push(fullPath);
      }
    }

    return files;
  }

  /**
   * –ò—â–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ
   */
  private findVariableUsageInFile(
    filePath: string,
    variables: string[]
  ): string[] {
    const content = readFileSync(filePath, 'utf-8');
    const usedVariables: string[] = [];

    for (const variable of variables) {
      // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
      const patterns = [
        new RegExp(`getEnv\\s*\\(\\s*['"]${variable}['"]`, 'g'),
        new RegExp(`process\\.env\\.${variable}`, 'g'),
        new RegExp(`config\\.${variable}`, 'g'),
        new RegExp(`getConfig\\(\\)\\.${variable}`, 'g'),
        new RegExp(`getDatabaseConfig\\(\\)\\.${variable}`, 'g'),
        new RegExp(`getRedisConfig\\(\\)\\.${variable}`, 'g'),
        new RegExp(`getFeatureFlagsConfig\\(\\)\\.${variable}`, 'g'),
        new RegExp(`getSecurityConfig\\(\\)\\.${variable}`, 'g'),
        new RegExp(`getMonitoringConfig\\(\\)\\.${variable}`, 'g'),
      ];

      for (const pattern of patterns) {
        if (pattern.test(content)) {
          usedVariables.push(variable);
          break;
        }
      }
    }

    return usedVariables;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
   */
  private analyzeVariableUsage(variables: string[]): string[] {
    const files = this.findTypeScriptFiles(this.sourceDir);
    const usedVariables = new Set<string>();

    for (const file of files) {
      const fileUsage = this.findVariableUsageInFile(file, variables);
      fileUsage.forEach(variable => usedVariables.add(variable));
    }

    return Array.from(usedVariables);
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
   */
  detect(): DeadConfigResult {
    const schemaVariables = this.extractSchemaVariables();
    const usedVariables = this.analyzeVariableUsage(schemaVariables);
    const unusedVariables = schemaVariables.filter(
      variable => !usedVariables.includes(variable)
    );

    return {
      unusedVariables,
      usedVariables,
      totalVariables: schemaVariables.length,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç
   */
  generateReport(result: DeadConfigResult): string {
    const { unusedVariables, usedVariables, totalVariables } = result;

    let report = 'üîç –û—Ç—á–µ—Ç –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n';
    report += '='.repeat(50) + '\n\n';

    report += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    report += `  –í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å—Ö–µ–º–µ: ${totalVariables}\n`;
    report += `  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${usedVariables.length}\n`;
    report += `  –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${unusedVariables.length}\n`;
    report += `  –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${((usedVariables.length / totalVariables) * 100).toFixed(1)}%\n\n`;

    if (unusedVariables.length > 0) {
      report += '‚ùå –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n';
      unusedVariables.forEach(variable => {
        report += `  - ${variable}\n`;
      });
      report += '\n';
    }

    if (usedVariables.length > 0) {
      report += '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n';
      usedVariables.forEach(variable => {
        report += `  - ${variable}\n`;
      });
      report += '\n';
    }

    if (unusedVariables.length > 0) {
      report += 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n';
      report += '  - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Å—Ö–µ–º—ã\n';
      report += '  - –û–±–Ω–æ–≤–∏—Ç–µ .env.example, —É–±—Ä–∞–≤ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n';
      report +=
        '  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–µ–∫—Ç–∞\n';
    } else {
      report += 'üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.\n';
    }

    return report;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
function main() {
  console.log('üîç –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');

  try {
    const detector = new DeadConfigDetector();
    const result = detector.detect();
    const report = detector.generateReport(result);

    console.log(report);

    if (result.unusedVariables.length > 0) {
      console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ!');
      process.exit(1);
    } else {
      console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!');
      process.exit(0);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

export { DeadConfigDetector };
