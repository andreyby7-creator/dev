#!/bin/bash
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/quality/quality-gates.sh [--strict] [--report]

# üö¶ Quality Gates - –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
# –ê–≤—Ç–æ—Ä: SaleSpot BY Team
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}üö¶ Quality Gates - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞${NC}"
    echo -e "${CYAN}================================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript
check_typescript() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript..."
    
    if pnpm run type-check > /dev/null 2>&1; then
        print_success "TypeScript: 0 –æ—à–∏–±–æ–∫"
        return 0
    else
        print_error "TypeScript: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint
check_eslint() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint..."
    
    local eslint_output
    eslint_output=$(pnpm run lint 2>&1)
    local eslint_exit_code=$?
    
    if [ $eslint_exit_code -eq 0 ]; then
        print_success "ESLint: 0 –æ—à–∏–±–æ–∫"
        return 0
    else
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        local error_count=$(echo "$eslint_output" | grep -c "error" || echo "0")
        local warning_count=$(echo "$eslint_output" | grep -c "warning" || echo "0")
        
        if [ "$error_count" -gt 0 ]; then
            print_error "ESLint: $error_count –æ—à–∏–±–æ–∫, $warning_count –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
            return 1
        else
            print_warning "ESLint: $warning_count –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
            return 0
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Prettier
check_prettier() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Prettier..."
    
    if pnpm run format:check > /dev/null 2>&1; then
        print_success "Prettier: –∫–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω"
        return 0
    else
        print_error "Prettier: –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
check_tests() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤..."
    
    if pnpm run test > /dev/null 2>&1; then
        print_success "–¢–µ—Å—Ç—ã: –≤—Å–µ –ø—Ä–æ—Ö–æ–¥—è—Ç"
        return 0
    else
        print_error "–¢–µ—Å—Ç—ã: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
check_security() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    
    local audit_output
    audit_output=$(pnpm audit --audit-level moderate --json 2>/dev/null || echo '{"vulnerabilities":{}}')
    local vulnerability_count=$(echo "$audit_output" | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
    
    if [ "$vulnerability_count" -eq 0 ]; then
        print_success "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return 0
    else
        print_error "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –Ω–∞–π–¥–µ–Ω–æ $vulnerability_count —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
check_coverage() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    local coverage_output
    coverage_output=$(pnpm run test:coverage 2>/dev/null || echo "")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    local coverage_percent=$(echo "$coverage_output" | grep -o "All files[^%]*" | grep -o "[0-9]*\.[0-9]*%" | head -1 | sed 's/%//' || echo "0")
    
    if [ "$coverage_percent" -ge 80 ]; then
        print_success "–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${coverage_percent}% (>= 80%)"
        return 0
    else
        print_warning "–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${coverage_percent}% (< 80%)"
        return 0  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞
check_bundle_size() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞..."
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    local bundle_size=$(find . -name "*.js" -path "*/dist/*" -o -path "*/.next/*" | xargs wc -c 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
    local bundle_size_mb=$((bundle_size / 1024 / 1024))
    
    if [ "$bundle_size_mb" -le 500 ]; then
        print_success "–†–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞: ${bundle_size_mb}MB (<= 500MB)"
        return 0
    else
        print_warning "–†–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞: ${bundle_size_mb}MB (> 500MB)"
        return 0  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
check_duplication() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞..."
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å jscpd –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ jscpd)"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
check_complexity() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞..."
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å eslint-plugin-complexity
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ eslint-plugin-complexity)"
    return 0
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
main_check() {
    local strict_mode=false
    local generate_report=false
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            --strict)
                strict_mode=true
                shift
                ;;
            --report)
                generate_report=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo "–û–ø—Ü–∏–∏:"
                echo "  --strict  –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º (–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–∏ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö)"
                echo "  --report  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
                echo "  --help    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                exit 0
                ;;
            *)
                print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                exit 1
                ;;
        esac
    done
    
    print_header
    
    local total_checks=0
    local passed_checks=0
    local failed_checks=0
    local warnings=0
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    ((total_checks++))
    if check_typescript; then
        ((passed_checks++))
    else
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if check_eslint; then
        ((passed_checks++))
    else
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if check_prettier; then
        ((passed_checks++))
    else
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if check_tests; then
        ((passed_checks++))
    else
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if check_security; then
        ((passed_checks++))
    else
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if check_coverage; then
        ((passed_checks++))
    else
        ((warnings++))
    fi
    
    ((total_checks++))
    if check_bundle_size; then
        ((passed_checks++))
    else
        ((warnings++))
    fi
    
    check_duplication
    check_complexity
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    echo -e "${CYAN}================================================${NC}"
    echo -e "${BLUE}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Quality Gates:${NC}"
    echo -e "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $passed_checks/$total_checks"
    echo -e "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: $failed_checks"
    echo -e "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $warnings"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if [ "$generate_report" = true ]; then
        generate_quality_report "$passed_checks" "$failed_checks" "$warnings" "$total_checks"
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if [ "$strict_mode" = true ]; then
        if [ $failed_checks -gt 0 ]; then
            print_error "Quality Gates –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ!"
            exit 1
        fi
    else
        if [ $failed_checks -gt 0 ]; then
            print_error "Quality Gates –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!"
            exit 1
        fi
    fi
    
    if [ $warnings -gt 0 ]; then
        print_warning "Quality Gates –ø—Ä–æ–π–¥–µ–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
    else
        print_success "Quality Gates –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    fi
    
    exit 0
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_quality_report() {
    local passed=$1
    local failed=$2
    local warnings=$3
    local total=$4
    
    print_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ..."
    
    local report_file="reports/quality-gates-$(date +%Y%m%d-%H%M%S).md"
    mkdir -p reports
    
    cat > "$report_file" << EOF
# –û—Ç—á–µ—Ç Quality Gates - $(date)

## –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **–ü—Ä–æ–π–¥–µ–Ω–æ**: $passed/$total
- **–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ**: $failed
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è**: $warnings

## –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

### TypeScript
- –°—Ç–∞—Ç—É—Å: $(check_typescript > /dev/null 2>&1 && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" || echo "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ")

### ESLint
- –°—Ç–∞—Ç—É—Å: $(check_eslint > /dev/null 2>&1 && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" || echo "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ")

### Prettier
- –°—Ç–∞—Ç—É—Å: $(check_prettier > /dev/null 2>&1 && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" || echo "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ")

### –¢–µ—Å—Ç—ã
- –°—Ç–∞—Ç—É—Å: $(check_tests > /dev/null 2>&1 && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" || echo "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ")

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –°—Ç–∞—Ç—É—Å: $(check_security > /dev/null 2>&1 && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" || echo "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ")

### –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
- –°—Ç–∞—Ç—É—Å: $(check_coverage > /dev/null 2>&1 && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" || echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")

### –†–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞
- –°—Ç–∞—Ç—É—Å: $(check_bundle_size > /dev/null 2>&1 && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" || echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

$(if [ $failed -gt 0 ]; then
    echo "1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º"
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./scripts/auto-fix.sh –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å ./scripts/code-captain.sh"
else
    echo "1. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    echo "2. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–º–∏—Ç"
fi)

$(if [ $warnings -gt 0 ]; then
    echo "3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –±—É–¥—É—â–µ–º"
fi)

EOF

    print_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $report_file"
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main_check "$@"
