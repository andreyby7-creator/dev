import { ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import compression from 'compression';
import * as fs from 'fs';
import helmet from 'helmet';
import * as path from 'path';
import 'reflect-metadata';
import { AppModule } from './app.module';
import {
  getConfig,
  validateAndLoadConfig,
  validateProductionEnv,
} from './config/env.config';
import { initSentry } from './config/sentry.config';
import { LoggerService } from './logger/logger.service';

async function bootstrap() {
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
  validateAndLoadConfig();
  validateProductionEnv();
  const config = getConfig();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Sentry
  initSentry();

  const app = await NestFactory.create(AppModule, {
    logger: new LoggerService(),
  });

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ middleware
  app.use(helmet());
  app.use(compression());

  // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  app.enableCors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  });

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    })
  );

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
  const swaggerConfig = new DocumentBuilder()
    .setTitle('SaleSpot BY API')
    .setDescription(
      'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏'
    )
    .setVersion('1.0')
    .addBearerAuth()
    .addTag('auth', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    .addTag('cards', '–ö–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏')
    .addTag('networks', '–°–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤')
    .addTag('stores', '–ú–∞–≥–∞–∑–∏–Ω—ã')
    .addTag('brands', '–ë—Ä–µ–Ω–¥—ã')
    .addTag('analytics', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
    .addServer('http://localhost:3001', 'Development server')
    .addServer('https://api.salespot.by', 'Production server')
    .build();

  const document = SwaggerModule.createDocument(app, swaggerConfig);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
  const openApiPath = path.join(__dirname, '../../openapi.json');
  fs.writeFileSync(openApiPath, JSON.stringify(document, null, 2));

  SwaggerModule.setup('docs', app, document);

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å (–ø–æ—Å–ª–µ Swagger)
  app.setGlobalPrefix('api/v1');

  const port = config.PORT;

  try {
    await app.listen(port);

    console.log(`üöÄ API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);

    console.log(`üìö Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${port}/docs`);

    console.log(`üìÑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: http://localhost:${port}/api-json`);

    console.log(`üíæ OpenAPI —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${openApiPath}`);
  } catch (error: unknown) {
    if (
      typeof error === 'object' &&
      error != null &&
      'code' in error &&
      error.code === 'EADDRINUSE'
    ) {
      console.error(
        `‚ùå –ü–æ—Ä—Ç ${port} —É–∂–µ –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
      );

      console.error(
        `üí° –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞: lsof -ti:${port} | xargs kill -9`
      );
    } else {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API:',
        error instanceof Error ? error.message : String(error)
      );
    }
    process.exit(1);
  }
}
void bootstrap();
